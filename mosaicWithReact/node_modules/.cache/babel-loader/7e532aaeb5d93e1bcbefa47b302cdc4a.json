{"ast":null,"code":"export { randomNumber, randomizeColor };\n/*************************************************************\n* This function returns a random integer between min and max *\n*************************************************************/\n\nfunction randomNumber(min, max) {\n  let color = Math.floor(Math.random() * (max - min)) + min;\n  return color;\n}\n/*****************************************************************\n* Starting on integers code (0-255) for red, green and blue,     *\n* this function returns a rgb color as a string of               *\n* hexadecimal equivalents for red, green and blue preceded for # *\n*****************************************************************/\n\n\nfunction rgb2hex(r, g, b) {\n  return \"#\" + (\"0\" + parseInt(r, 10).toString(16)).slice(-2) + (\"0\" + parseInt(g, 10).toString(16)).slice(-2) + (\"0\" + parseInt(b, 10).toString(16)).slice(-2);\n}\n/**********************************************************************************\n* Relative Luminance (From W3C Web Content Accessibility Guidelines (WCAG) 2.0    *\n* The relative brightness of any point in a colorspace,                           *\n* normalized to 0 for darkest black and 1 for lightest white                      *\n* Note 1:                                                                         *\n* For the sRGB colorspace, the relative luminance of a color is defined as:       *\n*\tL = 0.2126 * R + 0.7152 * G + 0.0722 * B where R, G and B are defined as:     *\n*\tif RsRGB <= 0.03928 then R = RsRGB/12.92 else R = ((RsRGB+0.055)/1.055) ^ 2.4 *\n*\tif GsRGB <= 0.03928 then G = GsRGB/12.92 else G = ((GsRGB+0.055)/1.055) ^ 2.4 *\n*\tif BsRGB <= 0.03928 then B = BsRGB/12.92 else B = ((BsRGB+0.055)/1.055) ^ 2.4 *\n* being RsRGB, GsRGB, and BsRGB are defined as:                                   *\n*\tRsRGB = R8bit/255                                                             *\n*\tGsRGB = G8bit/255                                                             *\n*\tBsRGB = B8bit/255                                                             *\n**********************************************************************************/\n\n\nfunction luminance(r, g, b) {\n  var a = [r, g, b].map(function (v) {\n    v /= 255;\n    return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\n  });\n  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n}\n/***************************************************************************\n* Function to compute the contrast between two colors based on the cocient *\n* between the luminance (+ 0.05) of these two colors                       *\n***************************************************************************/\n// minimal recommended contrast ratio is 4.5, or 3 for larger font-sizes\n\n\nfunction contrast(r1, g1, b1, r2, g2, b2) {\n  return (luminance(r1, g1, b1) + 0.05) / (luminance(r2, g2, b2) + 0.05);\n}\n/*******************************************************************************\n* Function to calculate a random color with the right contrast with baseColor  *\n* Wd get the red, green and blue components for both, the base color and the   *\n* random one, and check the contrast between them.                             *\n* It iterates until we get a color with the right contrast with the base color *\n* Although, according to the literature, the contrast should be > 3 (or > 4.5) *\n* Because I do not know whether the color with lower luminance is in the       *\n* background or foreground and the contrast is the quotient of two lumunances  *\n* I will accept contrast of 4 or 1/4                                           *\n*******************************************************************************/\n\n\nfunction randomizeColor(baseColor) {\n  let rb = parseInt(baseColor.slice(1, 3), 16);\n  let gb = parseInt(baseColor.slice(3, 5), 16);\n  let bb = parseInt(baseColor.slice(-2), 16);\n  let r = Math.floor(Math.random() * 256);\n  let g = Math.floor(Math.random() * 256);\n  let b = Math.floor(Math.random() * 256);\n  let contrastColors = contrast(r, g, b, rb, gb, bb);\n\n  while (contrastColors > 1. / 4.5 && contrastColors < 4.5) {\n    r = Math.floor(Math.random() * 256);\n    g = Math.floor(Math.random() * 256);\n    b = Math.floor(Math.random() * 256);\n    contrastColors = contrast(r, g, b, rb, gb, bb);\n  }\n\n  let color = rgb2hex(r, g, b);\n  return color;\n}","map":{"version":3,"sources":["/home/n3rd/Documents/gloriousKenobis/360-gloriousKenobis/mosaicWithReact/src/Functions.js"],"names":["randomNumber","randomizeColor","min","max","color","Math","floor","random","rgb2hex","r","g","b","parseInt","toString","slice","luminance","a","map","v","pow","contrast","r1","g1","b1","r2","g2","b2","baseColor","rb","gb","bb","contrastColors"],"mappings":"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","sourcesContent":["export {randomNumber, randomizeColor};\n\n/*************************************************************\n* This function returns a random integer between min and max *\n*************************************************************/\nfunction randomNumber (min, max) {\n\tlet color = Math.floor (Math.random()*(max - min)) + min;\n\treturn color;\n}\n\n/*****************************************************************\n* Starting on integers code (0-255) for red, green and blue,     *\n* this function returns a rgb color as a string of               *\n* hexadecimal equivalents for red, green and blue preceded for # *\n*****************************************************************/\nfunction rgb2hex(r,g,b){\n\treturn \"#\" +\n\t\t\t(\"0\" + parseInt(r,10).toString(16)).slice(-2) +\n\t\t\t(\"0\" + parseInt(g,10).toString(16)).slice(-2) +\n\t\t\t(\"0\" + parseInt(b,10).toString(16)).slice(-2);\n}\n\n/**********************************************************************************\n* Relative Luminance (From W3C Web Content Accessibility Guidelines (WCAG) 2.0    *\n* The relative brightness of any point in a colorspace,                           *\n* normalized to 0 for darkest black and 1 for lightest white                      *\n* Note 1:                                                                         *\n* For the sRGB colorspace, the relative luminance of a color is defined as:       *\n*\tL = 0.2126 * R + 0.7152 * G + 0.0722 * B where R, G and B are defined as:     *\n*\tif RsRGB <= 0.03928 then R = RsRGB/12.92 else R = ((RsRGB+0.055)/1.055) ^ 2.4 *\n*\tif GsRGB <= 0.03928 then G = GsRGB/12.92 else G = ((GsRGB+0.055)/1.055) ^ 2.4 *\n*\tif BsRGB <= 0.03928 then B = BsRGB/12.92 else B = ((BsRGB+0.055)/1.055) ^ 2.4 *\n* being RsRGB, GsRGB, and BsRGB are defined as:                                   *\n*\tRsRGB = R8bit/255                                                             *\n*\tGsRGB = G8bit/255                                                             *\n*\tBsRGB = B8bit/255                                                             *\n**********************************************************************************/\nfunction luminance(r, g, b) {\n\tvar a = [r, g, b].map(function (v) {\n\t\tv /= 255;\n\t\treturn v <= 0.03928\n\t\t\t? v / 12.92\n\t\t\t: Math.pow( (v + 0.055) / 1.055, 2.4 );\n\t});\n\treturn a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n}\n\n/***************************************************************************\n* Function to compute the contrast between two colors based on the cocient *\n* between the luminance (+ 0.05) of these two colors                       *\n***************************************************************************/\n// minimal recommended contrast ratio is 4.5, or 3 for larger font-sizes\nfunction contrast(r1, g1, b1, r2, g2, b2) {\n\treturn (luminance(r1, g1, b1) + 0.05)\n\t\t\t/ (luminance(r2, g2, b2) + 0.05);\n}\n\n/*******************************************************************************\n* Function to calculate a random color with the right contrast with baseColor  *\n* Wd get the red, green and blue components for both, the base color and the   *\n* random one, and check the contrast between them.                             *\n* It iterates until we get a color with the right contrast with the base color *\n* Although, according to the literature, the contrast should be > 3 (or > 4.5) *\n* Because I do not know whether the color with lower luminance is in the       *\n* background or foreground and the contrast is the quotient of two lumunances  *\n* I will accept contrast of 4 or 1/4                                           *\n*******************************************************************************/\nfunction randomizeColor (baseColor) {\n\tlet rb = parseInt(baseColor.slice(1, 3), 16);\n\tlet gb = parseInt(baseColor.slice(3, 5), 16);\n\tlet bb = parseInt(baseColor.slice(-2), 16);\n\tlet r = Math.floor (Math.random()*256);\n\tlet g = Math.floor (Math.random()*256);\n\tlet b = Math.floor (Math.random()*256);\n\tlet contrastColors = contrast(r, g, b, rb, gb, bb);\n\twhile (contrastColors > (1./4.5) && contrastColors < 4.5) {\n\t\tr = Math.floor (Math.random()*256);\n\t\tg = Math.floor (Math.random()*256);\n\t\tb = Math.floor (Math.random()*256);\n\t\tcontrastColors = contrast(r, g, b, rb, gb, bb);\n\t}\n\tlet color = rgb2hex (r, g, b);\n\treturn color;\n}\n"]},"metadata":{},"sourceType":"module"}