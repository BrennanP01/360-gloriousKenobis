{"ast":null,"code":"export{randomNumber,randomizeColor};/*************************************************************\n* This function returns a random integer between min and max *\n*************************************************************/function randomNumber(min,max){var color=Math.floor(Math.random()*(max-min))+min;return color;}/*****************************************************************\n* Starting on integers code (0-255) for red, green and blue,     *\n* this function returns a rgb color as a string of               *\n* hexadecimal equivalents for red, green and blue preceded for # *\n*****************************************************************/function rgb2hex(r,g,b){return\"#\"+(\"0\"+parseInt(r,10).toString(16)).slice(-2)+(\"0\"+parseInt(g,10).toString(16)).slice(-2)+(\"0\"+parseInt(b,10).toString(16)).slice(-2);}/**********************************************************************************\n* Relative Luminance (From W3C Web Content Accessibility Guidelines (WCAG) 2.0    *\n* The relative brightness of any point in a colorspace,                           *\n* normalized to 0 for darkest black and 1 for lightest white                      *\n* Note 1:                                                                         *\n* For the sRGB colorspace, the relative luminance of a color is defined as:       *\n*\tL = 0.2126 * R + 0.7152 * G + 0.0722 * B where R, G and B are defined as:     *\n*\tif RsRGB <= 0.03928 then R = RsRGB/12.92 else R = ((RsRGB+0.055)/1.055) ^ 2.4 *\n*\tif GsRGB <= 0.03928 then G = GsRGB/12.92 else G = ((GsRGB+0.055)/1.055) ^ 2.4 *\n*\tif BsRGB <= 0.03928 then B = BsRGB/12.92 else B = ((BsRGB+0.055)/1.055) ^ 2.4 *\n* being RsRGB, GsRGB, and BsRGB are defined as:                                   *\n*\tRsRGB = R8bit/255                                                             *\n*\tGsRGB = G8bit/255                                                             *\n*\tBsRGB = B8bit/255                                                             *\n**********************************************************************************/function luminance(r,g,b){var a=[r,g,b].map(function(v){v/=255;return v<=0.03928?v/12.92:Math.pow((v+0.055)/1.055,2.4);});return a[0]*0.2126+a[1]*0.7152+a[2]*0.0722;}/***************************************************************************\n* Function to compute the contrast between two colors based on the cocient *\n* between the luminance (+ 0.05) of these two colors                       *\n***************************************************************************/ // minimal recommended contrast ratio is 4.5, or 3 for larger font-sizes\nfunction contrast(r1,g1,b1,r2,g2,b2){return(luminance(r1,g1,b1)+0.05)/(luminance(r2,g2,b2)+0.05);}/*******************************************************************************\n* Function to calculate a random color with the right contrast with baseColor  *\n* Wd get the red, green and blue components for both, the base color and the   *\n* random one, and check the contrast between them.                             *\n* It iterates until we get a color with the right contrast with the base color *\n* Although, according to the literature, the contrast should be > 3 (or > 4.5) *\n* Because I do not know whether the color with lower luminance is in the       *\n* background or foreground and the contrast is the quotient of two lumunances  *\n* I will accept contrast of 4 or 1/4                                           *\n*******************************************************************************/function randomizeColor(baseColor){var rb=parseInt(baseColor.slice(1,3),16);var gb=parseInt(baseColor.slice(3,5),16);var bb=parseInt(baseColor.slice(-2),16);var r=Math.floor(Math.random()*256);var g=Math.floor(Math.random()*256);var b=Math.floor(Math.random()*256);var contrastColors=contrast(r,g,b,rb,gb,bb);while(contrastColors>1./4.5&&contrastColors<4.5){r=Math.floor(Math.random()*256);g=Math.floor(Math.random()*256);b=Math.floor(Math.random()*256);contrastColors=contrast(r,g,b,rb,gb,bb);}var color=rgb2hex(r,g,b);return color;}","map":{"version":3,"sources":["/home/n3rd/Documents/gloriousKenobis/360-gloriousKenobis/mosaicWithReact/src/Functions.js"],"names":["randomNumber","randomizeColor","min","max","color","Math","floor","random","rgb2hex","r","g","b","parseInt","toString","slice","luminance","a","map","v","pow","contrast","r1","g1","b1","r2","g2","b2","baseColor","rb","gb","bb","contrastColors"],"mappings":"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","sourcesContent":["export {randomNumber, randomizeColor};\n\n/*************************************************************\n* This function returns a random integer between min and max *\n*************************************************************/\nfunction randomNumber (min, max) {\n\tlet color = Math.floor (Math.random()*(max - min)) + min;\n\treturn color;\n}\n\n/*****************************************************************\n* Starting on integers code (0-255) for red, green and blue,     *\n* this function returns a rgb color as a string of               *\n* hexadecimal equivalents for red, green and blue preceded for # *\n*****************************************************************/\nfunction rgb2hex(r,g,b){\n\treturn \"#\" +\n\t\t\t(\"0\" + parseInt(r,10).toString(16)).slice(-2) +\n\t\t\t(\"0\" + parseInt(g,10).toString(16)).slice(-2) +\n\t\t\t(\"0\" + parseInt(b,10).toString(16)).slice(-2);\n}\n\n/**********************************************************************************\n* Relative Luminance (From W3C Web Content Accessibility Guidelines (WCAG) 2.0    *\n* The relative brightness of any point in a colorspace,                           *\n* normalized to 0 for darkest black and 1 for lightest white                      *\n* Note 1:                                                                         *\n* For the sRGB colorspace, the relative luminance of a color is defined as:       *\n*\tL = 0.2126 * R + 0.7152 * G + 0.0722 * B where R, G and B are defined as:     *\n*\tif RsRGB <= 0.03928 then R = RsRGB/12.92 else R = ((RsRGB+0.055)/1.055) ^ 2.4 *\n*\tif GsRGB <= 0.03928 then G = GsRGB/12.92 else G = ((GsRGB+0.055)/1.055) ^ 2.4 *\n*\tif BsRGB <= 0.03928 then B = BsRGB/12.92 else B = ((BsRGB+0.055)/1.055) ^ 2.4 *\n* being RsRGB, GsRGB, and BsRGB are defined as:                                   *\n*\tRsRGB = R8bit/255                                                             *\n*\tGsRGB = G8bit/255                                                             *\n*\tBsRGB = B8bit/255                                                             *\n**********************************************************************************/\nfunction luminance(r, g, b) {\n\tvar a = [r, g, b].map(function (v) {\n\t\tv /= 255;\n\t\treturn v <= 0.03928\n\t\t\t? v / 12.92\n\t\t\t: Math.pow( (v + 0.055) / 1.055, 2.4 );\n\t});\n\treturn a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n}\n\n/***************************************************************************\n* Function to compute the contrast between two colors based on the cocient *\n* between the luminance (+ 0.05) of these two colors                       *\n***************************************************************************/\n// minimal recommended contrast ratio is 4.5, or 3 for larger font-sizes\nfunction contrast(r1, g1, b1, r2, g2, b2) {\n\treturn (luminance(r1, g1, b1) + 0.05)\n\t\t\t/ (luminance(r2, g2, b2) + 0.05);\n}\n\n/*******************************************************************************\n* Function to calculate a random color with the right contrast with baseColor  *\n* Wd get the red, green and blue components for both, the base color and the   *\n* random one, and check the contrast between them.                             *\n* It iterates until we get a color with the right contrast with the base color *\n* Although, according to the literature, the contrast should be > 3 (or > 4.5) *\n* Because I do not know whether the color with lower luminance is in the       *\n* background or foreground and the contrast is the quotient of two lumunances  *\n* I will accept contrast of 4 or 1/4                                           *\n*******************************************************************************/\nfunction randomizeColor (baseColor) {\n\tlet rb = parseInt(baseColor.slice(1, 3), 16);\n\tlet gb = parseInt(baseColor.slice(3, 5), 16);\n\tlet bb = parseInt(baseColor.slice(-2), 16);\n\tlet r = Math.floor (Math.random()*256);\n\tlet g = Math.floor (Math.random()*256);\n\tlet b = Math.floor (Math.random()*256);\n\tlet contrastColors = contrast(r, g, b, rb, gb, bb);\n\twhile (contrastColors > (1./4.5) && contrastColors < 4.5) {\n\t\tr = Math.floor (Math.random()*256);\n\t\tg = Math.floor (Math.random()*256);\n\t\tb = Math.floor (Math.random()*256);\n\t\tcontrastColors = contrast(r, g, b, rb, gb, bb);\n\t}\n\tlet color = rgb2hex (r, g, b);\n\treturn color;\n}\n"]},"metadata":{},"sourceType":"module"}