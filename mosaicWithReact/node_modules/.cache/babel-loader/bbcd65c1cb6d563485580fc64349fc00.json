{"ast":null,"code":"var _jsxFileName = \"/home/n3rd/Documents/gloriousKenobis/360-gloriousKenobis/mosaicWithReact/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport facedraw from './facedraw.png';\nimport { randomNumber, randomizeColor } from './Functions.js';\n/************************************************************\n* This class is responsible of building the business logic  *\n* The class build the header, body and footer of the mosaic *\n************************************************************/\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.forceRandom = this.forceRandom.bind(this);\n    this.state = {\n      /*\t\t\tvalue: null,*/\n      newRendering: false\n    };\n  }\n  /*********************************************\n  * Function to create a table with:           *\n  *\t\tThe shape                            *\n  *\t\tCode to print in the foreground      *\n  *********************************************/\n\n\n  createTable() {\n    let table = [];\n\n    for (let i = 1; i < 145; i++) {\n      let randShape = randomNumber(0, 2);\n      let randCode = randomNumber(65, 91);\n      let randLetter = String.fromCharCode(randCode);\n\n      if (randShape === 0) {\n        table.push(React.createElement(Shape, {\n          key: i.toString(),\n          id: i.toString(),\n          name: \"square\",\n          value: randLetter,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }));\n      } else {\n        table.push(React.createElement(Shape, {\n          key: i.toString(),\n          id: i.toString(),\n          name: \"circle\",\n          value: randLetter,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }));\n      }\n    }\n\n    return table;\n  }\n  /******************************************************\n  * Function to refresh the complete mosaic with random *\n  * shapes, characters and colors                       *\n  ******************************************************/\n\n\n  forceRandom() {\n    const newRendering = this.state.newRendering;\n\n    if (newRendering) {\n      this.setState({\n        newRendering: false\n      });\n    } else {\n      this.setState({\n        newRendering: true\n      });\n    }\n  }\n\n  render() {\n    let table = this.createTable();\n    return React.createElement(\"div\", {\n      className: \"base\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"circle1\",\n      style: {\n        backgroundColor: 'red',\n        color: 'red'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"circle1\",\n      style: {\n        backgroundColor: 'green',\n        color: 'green'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"circle1\",\n      style: {\n        backgroundColor: 'yellow',\n        color: 'yellow'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"mosaic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, table), React.createElement(\"div\", {\n      className: \"footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"randbutton\",\n      onClick: this.forceRandom,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Randomize!\")));\n  }\n\n}\n/********************************************************************\n* This class is responsible for building every cell of the mosaic   *\n* The class receive the shape and the foreground character to print *\n* and calculate random color codes for these elements               *\n********************************************************************/\n\nclass Shape extends Component {\n  constructor(props) {\n    super(props);\n    this.refButton = React.createRef();\n    this.clickShape = this.clickShape.bind(this);\n    this.state = {\n      value: null,\n      innerHTML: null\n    };\n  }\n  /***********************************************************\n  * Function to update a single shape. Everytime is accessed *\n  * the character is swapped to a number and when accessed   *\n  * again, recovers the character associated to the shape    *\n  * Shape and colors are not updated                         *\n  ***********************************************************/\n\n  /*\tclickShape = () => { */\n\n\n  clickShape() {\n    /*\t\tconsole.log (this.refButton);*/\n    if (this.refButton.current.innerText === \"\") {\n      this.refButton.current.innerHTML = this.innerHTML;\n    } else {\n      this.innerHTML = this.refButton.current.innerHTML;\n      this.refButton.current.innerHTML = \"<img class='image' src='\" + facedraw + \"' alt='5'/>\";\n    }\n  }\n\n  render() {\n    /*const baseColor = rgb2hex (170, 170, 170);*/\n\n    /*const baseColor = rgb2hex (221, 221, 221);*/\n    const baseColor = \"#dddddd\";\n    let backColor = randomizeColor(baseColor);\n    let fontColor = randomizeColor(backColor);\n    let characterInside = this.props.value;\n    let keyValue = this.props.id;\n    let className = this.props.name;\n    return React.createElement(\"button\", {\n      key: keyValue,\n      ref: this.refButton,\n      id: keyValue,\n      value: characterInside.toString(),\n      className: className,\n      style: {\n        backgroundColor: backColor,\n        color: fontColor\n      },\n      onClick: this.clickShape,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, characterInside);\n  }\n\n}","map":{"version":3,"sources":["/home/n3rd/Documents/gloriousKenobis/360-gloriousKenobis/mosaicWithReact/src/App.js"],"names":["React","Component","facedraw","randomNumber","randomizeColor","App","constructor","props","forceRandom","bind","state","newRendering","createTable","table","i","randShape","randCode","randLetter","String","fromCharCode","push","toString","setState","render","backgroundColor","color","Shape","refButton","createRef","clickShape","value","innerHTML","current","innerText","baseColor","backColor","fontColor","characterInside","keyValue","id","className","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport facedraw from './facedraw.png';\nimport {randomNumber, randomizeColor} from './Functions.js';\n\n/************************************************************\n* This class is responsible of building the business logic  *\n* The class build the header, body and footer of the mosaic *\n************************************************************/\nexport default class App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.forceRandom = this.forceRandom.bind (this);\n\t\tthis.state = {\n/*\t\t\tvalue: null,*/\n\t\t\tnewRendering: false\n\t\t};\n\t}\n\n\t/*********************************************\n\t* Function to create a table with:           *\n\t*\t\tThe shape                            *\n\t*\t\tCode to print in the foreground      *\n\t*********************************************/\n\tcreateTable () {\n\t\tlet table = [];\n\n\t\tfor (let i = 1; i < 145; i++) {\n\t\t\tlet randShape = randomNumber(0, 2);\n\t\t\tlet randCode = randomNumber(65, 91);\n\t\t\tlet randLetter = String.fromCharCode (randCode);\n\t\t\tif (randShape === 0) {\n\t\t\t\ttable.push(<Shape\n\t\t\t\t\tkey={i.toString()}\n\t\t\t\t\tid={i.toString()}\n\t\t\t\t\tname='square'\n\t\t\t\t\tvalue={randLetter} />);\n\t\t\t} else {\n\t\t\t\ttable.push(<Shape\n\t\t\t\t\tkey={i.toString()}\n\t\t\t\t\tid={i.toString()}\n\t\t\t\t\tname='circle'\n\t\t\t\t\tvalue={randLetter} />);\n\t\t\t}\n\t\t}\n\t\treturn table;\n\t}\n\n\t/******************************************************\n\t* Function to refresh the complete mosaic with random *\n\t* shapes, characters and colors                       *\n\t******************************************************/\n\tforceRandom() {\n\t\tconst newRendering = this.state.newRendering;\n\t\tif (newRendering) {\n\t\t\tthis.setState ({newRendering: false});\n\t\t} else {\n\t\t\tthis.setState ({newRendering: true});\n\t\t}\n\t}\n\t\n\trender() {\n\t\tlet table = this.createTable ();\n\t\treturn (\n\t\t\t<div className='base'>\n\t\t\t\t<div className='header'>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='circle1'\n\t\t\t\t\t\tstyle={{backgroundColor: 'red', color: 'red'}}\n\t\t\t\t\t></button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='circle1'\n\t\t\t\t\t\tstyle={{backgroundColor: 'green', color: 'green'}}\n\t\t\t\t\t></button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='circle1'\n\t\t\t\t\t\tstyle={{backgroundColor: 'yellow', color: 'yellow'}}\n\t\t\t\t\t></button>\n\t\t\t\t</div>\n\t\t\t\t<div className='mosaic'>\n\t\t\t\t\t{table}\n\t\t\t\t</div>\n\t\t\t\t<div className='footer'>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='randbutton'\n\t\t\t\t\t\tonClick={this.forceRandom}\n\t\t\t\t\t>\n\t\t\t\t\t\tRandomize!\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n/********************************************************************\n* This class is responsible for building every cell of the mosaic   *\n* The class receive the shape and the foreground character to print *\n* and calculate random color codes for these elements               *\n********************************************************************/\nclass Shape extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.refButton = React.createRef();\n\t\tthis.clickShape = this.clickShape.bind (this);\n\t\tthis.state = {\n\t\t\tvalue: null,\n\t\t\tinnerHTML: null,\n\t\t};\n\t}\n\n\t/***********************************************************\n\t* Function to update a single shape. Everytime is accessed *\n\t* the character is swapped to a number and when accessed   *\n\t* again, recovers the character associated to the shape    *\n\t* Shape and colors are not updated                         *\n\t***********************************************************/\n/*\tclickShape = () => { */\n\tclickShape () {\n/*\t\tconsole.log (this.refButton);*/\n\t\tif (this.refButton.current.innerText === \"\") {\n\t\t\tthis.refButton.current.innerHTML = this.innerHTML;\n\t\t} else {\n\t\t\tthis.innerHTML = this.refButton.current.innerHTML;\n\t\t\tthis.refButton.current.innerHTML = \n\t\t\t\t\t\"<img class='image' src='\"+facedraw+\"' alt='5'/>\";\n\t\t}\n\t}\n\n\trender() {\n\t\t/*const baseColor = rgb2hex (170, 170, 170);*/\n\t\t/*const baseColor = rgb2hex (221, 221, 221);*/\n\t\tconst baseColor = \"#dddddd\";\n\t\tlet backColor = randomizeColor (baseColor);\n\t\tlet fontColor = randomizeColor (backColor);\n\t\tlet characterInside = this.props.value;\n\t\tlet keyValue = this.props.id;\n\t\tlet className = this.props.name;\n\t\treturn (\n\t\t\t<button\n\t\t\t\tkey={keyValue}\n\t\t\t\tref={this.refButton}\n\t\t\t\tid={keyValue}\n\t\t\t\tvalue={characterInside.toString()}\n\t\t\t\tclassName={className}\n\t\t\t\tstyle={{backgroundColor: backColor, color: fontColor}}\n\t\t\t\tonClick={this.clickShape}\n\t\t\t>\n\t\t\t\t{characterInside}\n\t\t\t</button>\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}