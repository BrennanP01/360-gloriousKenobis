{"version":3,"sources":["whistle.mp3","Functions.js","App.js","index.js"],"names":["randomNumber","min","max","Math","floor","random","luminance","r","g","b","a","map","v","pow","contrast","r1","g1","b1","r2","g2","b2","randomizeColor","baseColor","rb","parseInt","slice","gb","bb","contrastColors","toString","rgb2hex","App","useState","newRendering","SetNewRendering","numberCells","numberShapes","table","i","randShape","randCode","randLetter","String","fromCharCode","indexString","shapeForm","push","id","name","size","value","createTable","className","style","backgroundColor","color","Footer","forceRandom","startCount","counter","SetCounter","isPlaying","SetIsPlaying","countRef","useRef","current","useEffect","interval","el","document","getElementById","setInterval","currCounter","innerHTML","clearInterval","backColor","onClick","url","soundToPlay","playStatus","Sound","status","PLAYING","STOPPED","onFinishedPlaying","console","log","Shape","props","refButton","React","createRef","clickShape","bind","state","this","innerText","imageWidth","fontColor","characterInside","keyValue","shapeSizeInt","charSizeInt","shapeSizeStr","charSizeStr","ref","width","height","fontSize","Component","ReactDOM","render"],"mappings":"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","file":"static/js/main.c0f20e5d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/whistle.20d2b3b0.mp3\";","//import React, {useState, useEffect, useRef} from 'react';\nexport {randomNumber, randomizeColor};\n\n/*function Count () {\n\tconst [counter, setCounter] = useState (0);\n\tconst countRef = useRef (counter);\n\tcountRef.current = counter;\n}\n\nuseEffect(() => {\n\tlet interval;\n//\tif (realTime) {\n\t\tconst el = document.getElementById('counter');\n\t\t//let currCounter = parseInt (el.innerHTML, 10);\n\t\tinterval = setInterval(() => {\n\t\t\tlet currCount = countRef.current;\n\t\t\tsetCounter (currCount => currCount - 1);\n\t\t\tconsole.log('In setInterval', currCount);\n\t\t\tel.innerHTML = currCount;\n\t\t}, 1000);\n//\t} else {\n//\t\tclearInterval(interval);\n//\t}\n//\treturn () => clearInterval(interval);\n\treturn;\n}, [realTime]);\n*/\n/*************************************************************\n* This function returns a random integer between min and max *\n*************************************************************/\nfunction randomNumber (min, max) {\n\tlet color = Math.floor (Math.random()*(max - min)) + min;\n\treturn color;\n}\n\n/*****************************************************************\n* Starting on integers code (0-255) for red, green and blue,     *\n* this function returns a rgb color as a string of               *\n* hexadecimal equivalents for red, green and blue preceded for # *\n*****************************************************************/\nfunction rgb2hex(r,g,b){\n\treturn \"#\" +\n\t\t\t(\"0\" + parseInt(r,10).toString(16)).slice(-2) +\n\t\t\t(\"0\" + parseInt(g,10).toString(16)).slice(-2) +\n\t\t\t(\"0\" + parseInt(b,10).toString(16)).slice(-2);\n}\n\n/**********************************************************************************\n* Relative Luminance (From W3C Web Content Accessibility Guidelines (WCAG) 2.0    *\n* The relative brightness of any point in a colorspace,                           *\n* normalized to 0 for darkest black and 1 for lightest white                      *\n* Note 1:                                                                         *\n* For the sRGB colorspace, the relative luminance of a color is defined as:       *\n*\tL = 0.2126 * R + 0.7152 * G + 0.0722 * B where R, G and B are defined as:     *\n*\tif RsRGB <= 0.03928 then R = RsRGB/12.92 else R = ((RsRGB+0.055)/1.055) ^ 2.4 *\n*\tif GsRGB <= 0.03928 then G = GsRGB/12.92 else G = ((GsRGB+0.055)/1.055) ^ 2.4 *\n*\tif BsRGB <= 0.03928 then B = BsRGB/12.92 else B = ((BsRGB+0.055)/1.055) ^ 2.4 *\n* being RsRGB, GsRGB, and BsRGB are defined as:                                   *\n*\tRsRGB = R8bit/255                                                             *\n*\tGsRGB = G8bit/255                                                             *\n*\tBsRGB = B8bit/255                                                             *\n**********************************************************************************/\nfunction luminance(r, g, b) {\n\tvar a = [r, g, b].map(function (v) {\n\t\tv /= 255;\n\t\treturn v <= 0.03928\n\t\t\t? v / 12.92\n\t\t\t: Math.pow( (v + 0.055) / 1.055, 2.4 );\n\t});\n\treturn a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n}\n\n/***************************************************************************\n* Function to compute the contrast between two colors based on the cocient *\n* between the luminance (+ 0.05) of these two colors                       *\n***************************************************************************/\n// minimal recommended contrast ratio is 4.5, or 3 for larger font-sizes\nfunction contrast(r1, g1, b1, r2, g2, b2) {\n\treturn (luminance(r1, g1, b1) + 0.05)\n\t\t\t/ (luminance(r2, g2, b2) + 0.05);\n}\n\n/*******************************************************************************\n* Function to calculate a random color with the right contrast with baseColor  *\n* Wd get the red, green and blue components for both, the base color and the   *\n* random one, and check the contrast between them.                             *\n* It iterates until we get a color with the right contrast with the base color *\n* Although, according to the literature, the contrast should be > 3 (or > 4.5) *\n* Because I do not know whether the color with lower luminance is in the       *\n* background or foreground and the contrast is the quotient of two lumunances  *\n* I will accept contrast of 4 or 1/4                                           *\n*******************************************************************************/\nfunction randomizeColor (baseColor) {\n\tlet rb = parseInt(baseColor.slice(1, 3), 16);\n\tlet gb = parseInt(baseColor.slice(3, 5), 16);\n\tlet bb = parseInt(baseColor.slice(-2), 16);\n\tlet r = Math.floor (Math.random()*256);\n\tlet g = Math.floor (Math.random()*256);\n\tlet b = Math.floor (Math.random()*256);\n\tlet contrastColors = contrast(r, g, b, rb, gb, bb);\n\twhile (contrastColors > (1./4.5) && contrastColors < 4.5) {\n\t\tr = Math.floor (Math.random()*256);\n\t\tg = Math.floor (Math.random()*256);\n\t\tb = Math.floor (Math.random()*256);\n\t\tcontrastColors = contrast(r, g, b, rb, gb, bb);\n\t}\n\tlet color = rgb2hex (r, g, b);\n\treturn color;\n}\n","import React, { Component, useState, useEffect, useRef} from 'react';\nimport './App.css';\nimport Sound from 'react-sound';\nimport facedraw from './facedraw.png';\nimport soundToPlay from './whistle.mp3';\nimport {randomNumber, randomizeColor} from './Functions.js';\n\n/************************************************************\n* This class is responsible of building the business logic  *\n* The class build the header, body and footer of the mosaic *\n************************************************************/\nexport default function App () {\n\tconst [newRendering, SetNewRendering] = useState(false);\n\tconst [numberCells] = useState(12);\n\tconst [numberShapes] = useState(2);\n\n\t/*********************************************\n\t* Function to create a table with:           *\n\t*\t\tThe shape                            *\n\t*\t\tCode to print in the foreground      *\n\t*********************************************/\n\tfunction createTable () {\n\t\tlet table = [];\n\n\t\tfor (let i = 1; i < (numberCells*numberCells + 1); i++) {\n\t\t\tlet randShape = randomNumber(0, numberShapes);\n\t\t\tlet randCode = randomNumber(65, 91);\n\t\t\tlet randLetter = String.fromCharCode (randCode);\n\t\t\tlet indexString = i.toString();\n\t\t\tlet shapeForm = 'shape' + randShape.toString();\n\t\t\ttable.push(<Shape\n\t\t\t\t\tkey = {indexString}\n\t\t\t\t\tid = {indexString}\n\t\t\t\t\tname = {shapeForm}\n\t\t\t\t\tsize = {numberCells}\n\t\t\t\t\tvalue = {randLetter} />);\n\t\t}\n\t\treturn table;\n\t}\n\t\n\t/******************************************************\n\t* Function to refresh the complete mosaic with random *\n\t* shapes, characters and colors                       *\n\t******************************************************/\n\tfunction forceRandom() {\n\t\tif (newRendering) {\n\t\t\tSetNewRendering (false);\n\t\t} else {\n\t\t\tSetNewRendering (true);\n\t\t}\n\t}\n\n\tlet table = createTable ();\n\n\treturn (\n\t\t<div className='base'>\n\t\t\t<div className='header'>\n\t\t\t\t<button\n\t\t\t\t\tclassName='circle1'\n\t\t\t\t\tstyle={{backgroundColor: 'red', color: 'red'}}\n\t\t\t\t></button>\n\t\t\t\t<button\n\t\t\t\t\tclassName='circle1'\n\t\t\t\t\tstyle={{backgroundColor: 'green', color: 'green'}}\n\t\t\t\t></button>\n\t\t\t\t<button\n\t\t\t\t\tclassName='circle1'\n\t\t\t\t\tstyle={{backgroundColor: 'yellow', color: 'yellow'}}\n\t\t\t\t></button>\n\t\t\t</div>\n\t\t\t<div className='mosaic'>\n\t\t\t\t{table}\n\t\t\t</div>\n\t\t\t<Footer \n\t\t\t\tforceRandom={forceRandom}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\n/*********************************************************************\n* This class is responsible of building the footer of our mosaic app *\n* The footer includes the button to start/stop the timer             *\n* and the current timer value                                        *\n*********************************************************************/\nfunction Footer ({forceRandom}) {\n\tconst startCount = useState(true);\n\tconst [counter, SetCounter] = useState(60);\n\tconst [isPlaying, SetIsPlaying] = useState(false);\n\tconst countRef = useRef(counter);\n\tcountRef.current = counter;\n\n\t/**********************************************\n\t* Function to refresh the current timer value *\n\t**********************************************/\n\tuseEffect(() => {\n\t\tlet interval;\n\t\tif (startCount) {\n\t\t\tconst el = document.getElementById('counter');\n\t\t\tinterval = setInterval(() => {\n\t\t\t\tSetCounter (currCounter => currCounter - 1);\n\t\t\t\tlet currCounter = countRef.current;\n\t\t\t\tel.innerHTML = currCounter;\n\t\t\t}, 1000);\n\t\t} else {\n\t\t\tclearInterval(interval);\n\t\t}\n\t\treturn () => clearInterval(interval);\n\t}, [startCount]);\n\n\t/*******************************************************************\n\t* Function to reset the timer and prepare for next temporization   *\n\t* Also, it launches a sound when the timer reach the value of zero *\n\t*******************************************************************/\n\tconst ResetCounter = () => {\n\t\tSetCounter(60);\n\t\tforceRandom();\n\t}\n\n\t/***************************************************************\n\t* Function fired when the music ends to avoid restarting again *\n\t***************************************************************/\n\tconst handleSongFinishedPlaying = () => {\n\t\tSetIsPlaying(!isPlaying);\n\t\tconsole.log(isPlaying);\n\t}\n\t\t\n\tlet currCounter = countRef.current;\n\tlet backColor;\n\tif (currCounter === 0) {\n\t\tResetCounter();\n\t\tSetIsPlaying(!isPlaying);\n\t} else if (currCounter <= 10) {\n\t\tbackColor = 'red';\n\t} else {\n\t\tbackColor = '#dddddd';\n\t}\n\treturn (\n\t\t<div className='footer'>\n\t\t\t<div className='centered'>\n\t\t\t\t<button\n\t\t\t\t\tid='randbutton'\n\t\t\t\t\tclassName='randbutton'\n\t\t\t\t\tonClick={() => forceRandom()}\n\t\t\t\t>\n\t\t\t\t\tRandomize!\n\t\t\t\t</button>\n\t\t\t\t<label className='count_label'>\n\t\t\t\t\tTimer:\n\t\t\t\t</label>\n\t\t\t\t<label\n\t\t\t\t\tid='counter'\n\t\t\t\t\tclassName='counter'\n\t\t\t\t\tstyle={{backgroundColor: backColor}}\n\t\t\t\t>{counter}</label>\n\t\t\t</div>\n\t\t\t<Sound\n\t\t\t\turl = {soundToPlay}\n\t\t\t\tplayStatus = {isPlaying ? Sound.status.PLAYING : Sound.status.STOPPED}\n\t\t\t\tonFinishedPlaying = {handleSongFinishedPlaying}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\n/********************************************************************\n* This class is responsible for building every cell of the mosaic   *\n* The class receive the shape and the foreground character to print *\n* and calculate random color codes for these elements               *\n********************************************************************/\nclass Shape extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.refButton = React.createRef();\n\t\tthis.clickShape = this.clickShape.bind (this);\n\t\tthis.state = {\n\t\t\tvalue: null,\n\t\t\tinnerHTML: null,\n\t\t};\n\t}\n\n\t/***********************************************************\n\t* Function to update a single shape. Everytime is accessed *\n\t* the character is swapped to an image and when accessed   *\n\t* again, recovers the character associated to the shape    *\n\t* Shape and colors are not updated                         *\n\t***********************************************************/\n/*\tclickShape = () => { */\n\tclickShape () {\n/*\t\tconsole.log (this.refButton);*/\n\t\tif (this.refButton.current.innerText === \"\") {\n\t\t\tthis.refButton.current.innerHTML = this.innerHTML;\n\t\t} else {\n\t\t\t/* Computes the relative size of the facedraw */\n\t\t\tconst shapeSizeInt = 100. / this.props.size;\n\t\t\tconst charSizeInt = 1.1*shapeSizeInt / 2;\n\t\t\tconst imageWidth = charSizeInt.toString() + \"vmin\";\n\t\t\tthis.innerHTML = this.refButton.current.innerHTML;\n\t\t\tthis.refButton.current.innerHTML = \n\t\t\t\t\"<img class='image' src='\" + facedraw + \"' style='width:\" + imageWidth + \"' alt='5'/>\";\n\t\t}\n\t}\n\n\trender() {\n\t\tconst baseColor = \"#dddddd\";\n\t\tconst backColor = randomizeColor (baseColor);\n\t\tconst fontColor = randomizeColor (backColor);\n\t\tconst characterInside = this.props.value;\n\t\tconst keyValue = this.props.id;\n\t\tconst className = this.props.name;\n\t\t/* Computes the relative size of the shapes and characters */\n\t\tconst shapeSizeInt = 100. / this.props.size;\n\t\tconst charSizeInt = 1.128*shapeSizeInt / 2;\n\t\tconst shapeSizeStr = shapeSizeInt.toString() + \"%\";\n\t\tconst charSizeStr = charSizeInt.toString() + \"vmin\";\n\t\t//console.log (charSizeStr);\n\t\treturn (\n\t\t\t<button\n\t\t\t\tkey={keyValue}\n\t\t\t\tref={this.refButton}\n\t\t\t\tid={keyValue}\n\t\t\t\tvalue={characterInside.toString()}\n\t\t\t\tclassName={className}\n\t\t\t\tstyle={{backgroundColor: backColor, color: fontColor, \n\t\t\t\t\t\twidth: shapeSizeStr, height: shapeSizeStr,\n\t\t\t\t\t\tfontSize: charSizeStr}}\n\t\t\t\tonClick={this.clickShape}\n\t\t\t>\n\t\t\t\t{characterInside}\n\t\t\t</button>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.js';\n\nReactDOM.render(\n\t<App />,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}