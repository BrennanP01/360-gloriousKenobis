{"ast":null,"code":"var _jsxFileName = \"/home/n3rd/Documents/groupProjects/360-gloriousKenobis/mosaicWithReactV2/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { Component, useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport Sound from 'react-sound';\nimport facedraw from './facedraw.png';\nimport soundToPlay from './whistle.mp3';\nimport { randomNumber, randomizeColor } from './Functions.js';\n/************************************************************\n* This class is responsible of building the business logic  *\n* The class build the header, body and footer of the mosaic *\n************************************************************/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [newRendering, SetNewRendering] = useState(false);\n  const [numberCells] = useState(12);\n  const [numberShapes] = useState(2);\n  /*********************************************\n  * Function to create a table with:           *\n  *\t\tThe shape                            *\n  *\t\tCode to print in the foreground      *\n  *********************************************/\n\n  function createTable() {\n    let table = [];\n\n    for (let i = 1; i < numberCells * numberCells + 1; i++) {\n      let randShape = randomNumber(0, numberShapes);\n      let randCode = randomNumber(65, 91);\n      let randLetter = String.fromCharCode(randCode);\n      let indexString = i.toString();\n      let shapeForm = 'shape' + randShape.toString();\n      table.push( /*#__PURE__*/_jsxDEV(Shape, {\n        id: indexString,\n        name: shapeForm,\n        size: numberCells,\n        value: randLetter\n      }, indexString, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 15\n      }, this));\n    }\n\n    return table;\n  }\n  /******************************************************\n  * Function to refresh the complete mosaic with random *\n  * shapes, characters and colors                       *\n  ******************************************************/\n\n\n  function forceRandom() {\n    if (newRendering) {\n      SetNewRendering(false);\n    } else {\n      SetNewRendering(true);\n    }\n  }\n\n  let table = createTable();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"base\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"circle1\",\n        style: {\n          backgroundColor: 'red',\n          color: 'red'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"circle1\",\n        style: {\n          backgroundColor: 'green',\n          color: 'green'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"circle1\",\n        style: {\n          backgroundColor: 'yellow',\n          color: 'yellow'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mosaic\",\n      children: table\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      forceRandom: forceRandom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 3\n  }, this);\n}\n/*********************************************************************\n* This class is responsible of building the footer of our mosaic app *\n* The footer includes the button to start/stop the timer             *\n* and the current timer value                                        *\n*********************************************************************/\n\n_s(App, \"3YZ8XqbmbQDROgUjG6FoAtOjLiY=\");\n\n_c = App;\n\nfunction Footer({\n  forceRandom\n}) {\n  _s2();\n\n  const [startCount, SetStartCount] = useState(true);\n  const [counter, SetCounter] = useState(60);\n  const [isPlaying, SetIsPlaying] = useState(false);\n  const countRef = useRef(counter);\n  countRef.current = counter;\n  /**********************************************\n  * Function to refresh the current timer value *\n  **********************************************/\n\n  useEffect(() => {\n    let interval;\n\n    if (startCount) {\n      const el = document.getElementById('counter');\n      interval = setInterval(() => {\n        SetCounter(currCounter => currCounter - 1);\n        let currCounter = countRef.current;\n        el.innerHTML = currCounter;\n      }, 1000);\n    } else {\n      clearInterval(interval);\n    }\n\n    return () => clearInterval(interval);\n  }, [startCount]);\n  /*******************************************************************\n  * Function to reset the timer and prepare for next temporization   *\n  * Also, it launches a sound when the timer reach the value of zero *\n  *******************************************************************/\n\n  const ResetCounter = () => {\n    SetCounter(60);\n    SetStartCount(startCount);\n    forceRandom();\n  };\n  /***************************************************************\n  * Function fired when the music ends to avoid restarting again *\n  ***************************************************************/\n\n\n  const handleSongFinishedPlaying = () => {\n    SetIsPlaying(!isPlaying);\n  };\n\n  let currCounter = countRef.current;\n  let backColor;\n\n  if (currCounter === 0) {\n    ResetCounter();\n    SetIsPlaying(!isPlaying);\n  } else if (currCounter <= 10) {\n    backColor = 'red';\n  } else {\n    backColor = '#dddddd';\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"footer\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"randbutton\",\n      className: \"randbutton\",\n      onClick: () => forceRandom(),\n      children: \"Randomize!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"count_label\",\n      children: \"Timer:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      id: \"counter\",\n      className: \"counter\",\n      style: {\n        backgroundColor: backColor\n      },\n      children: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Sound, {\n      url: soundToPlay,\n      playStatus: isPlaying ? Sound.status.PLAYING : Sound.status.STOPPED,\n      onFinishedPlaying: handleSongFinishedPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 3\n  }, this);\n}\n/********************************************************************\n* This class is responsible for building every cell of the mosaic   *\n* The class receive the shape and the foreground character to print *\n* and calculate random color codes for these elements               *\n********************************************************************/\n\n\n_s2(Footer, \"+ATdqAm9xjkWzDwxvNiGK1fO+8I=\");\n\n_c2 = Footer;\n\nclass Shape extends Component {\n  constructor(props) {\n    super(props);\n    this.refButton = /*#__PURE__*/React.createRef();\n    this.clickShape = this.clickShape.bind(this);\n    this.state = {\n      value: null,\n      innerHTML: null\n    };\n  }\n  /***********************************************************\n  * Function to update a single shape. Everytime is accessed *\n  * the character is swapped to an image and when accessed   *\n  * again, recovers the character associated to the shape    *\n  * Shape and colors are not updated                         *\n  ***********************************************************/\n\n  /*\tclickShape = () => { */\n\n\n  clickShape() {\n    /*\t\tconsole.log (this.refButton);*/\n    if (this.refButton.current.innerText === \"\") {\n      this.refButton.current.innerHTML = this.innerHTML;\n    } else {\n      /* Computes the relative size of the facedraw */\n      const shapeSizeInt = 100. / this.props.size;\n      const charSizeInt = 1.1 * shapeSizeInt / 2;\n      const imageWidth = charSizeInt.toString() + \"vmin\";\n      this.innerHTML = this.refButton.current.innerHTML;\n      this.refButton.current.innerHTML = \"<img class='image' src='\" + facedraw + \"' style='width:\" + imageWidth + \"' alt='5'/>\";\n    }\n  }\n\n  render() {\n    const baseColor = \"#dddddd\";\n    const backColor = randomizeColor(baseColor);\n    const fontColor = randomizeColor(backColor);\n    const characterInside = this.props.value;\n    const keyValue = this.props.id;\n    const className = this.props.name;\n    /* Computes the relative size of the shapes and characters */\n\n    const shapeSizeInt = 100. / this.props.size;\n    const charSizeInt = 1.128 * shapeSizeInt / 2;\n    const shapeSizeStr = shapeSizeInt.toString() + \"%\";\n    const charSizeStr = charSizeInt.toString() + \"vmin\"; //console.log (charSizeStr);\n\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      ref: this.refButton,\n      id: keyValue,\n      value: characterInside.toString(),\n      className: className,\n      style: {\n        backgroundColor: backColor,\n        color: fontColor,\n        width: shapeSizeStr,\n        height: shapeSizeStr,\n        fontSize: charSizeStr\n      },\n      onClick: this.clickShape,\n      children: characterInside\n    }, keyValue, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Footer\");","map":{"version":3,"sources":["/home/n3rd/Documents/groupProjects/360-gloriousKenobis/mosaicWithReactV2/src/App.js"],"names":["React","Component","useState","useEffect","useRef","Sound","facedraw","soundToPlay","randomNumber","randomizeColor","App","newRendering","SetNewRendering","numberCells","numberShapes","createTable","table","i","randShape","randCode","randLetter","String","fromCharCode","indexString","toString","shapeForm","push","forceRandom","backgroundColor","color","Footer","startCount","SetStartCount","counter","SetCounter","isPlaying","SetIsPlaying","countRef","current","interval","el","document","getElementById","setInterval","currCounter","innerHTML","clearInterval","ResetCounter","handleSongFinishedPlaying","backColor","status","PLAYING","STOPPED","Shape","constructor","props","refButton","createRef","clickShape","bind","state","value","innerText","shapeSizeInt","size","charSizeInt","imageWidth","render","baseColor","fontColor","characterInside","keyValue","id","className","name","shapeSizeStr","charSizeStr","width","height","fontSize"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect, useRef} from 'react';\nimport './App.css';\nimport Sound from 'react-sound';\nimport facedraw from './facedraw.png';\nimport soundToPlay from './whistle.mp3';\nimport {randomNumber, randomizeColor} from './Functions.js';\n\n/************************************************************\n* This class is responsible of building the business logic  *\n* The class build the header, body and footer of the mosaic *\n************************************************************/\nexport default function App () {\n\tconst [newRendering, SetNewRendering] = useState(false);\n\tconst [numberCells] = useState(12);\n\tconst [numberShapes] = useState(2);\n\n\t/*********************************************\n\t* Function to create a table with:           *\n\t*\t\tThe shape                            *\n\t*\t\tCode to print in the foreground      *\n\t*********************************************/\n\tfunction createTable () {\n\t\tlet table = [];\n\n\t\tfor (let i = 1; i < (numberCells*numberCells + 1); i++) {\n\t\t\tlet randShape = randomNumber(0, numberShapes);\n\t\t\tlet randCode = randomNumber(65, 91);\n\t\t\tlet randLetter = String.fromCharCode (randCode);\n\t\t\tlet indexString = i.toString();\n\t\t\tlet shapeForm = 'shape' + randShape.toString();\n\t\t\ttable.push(<Shape\n\t\t\t\t\tkey = {indexString}\n\t\t\t\t\tid = {indexString}\n\t\t\t\t\tname = {shapeForm}\n\t\t\t\t\tsize = {numberCells}\n\t\t\t\t\tvalue = {randLetter} />);\n\t\t}\n\t\treturn table;\n\t}\n\t\n\t/******************************************************\n\t* Function to refresh the complete mosaic with random *\n\t* shapes, characters and colors                       *\n\t******************************************************/\n\tfunction forceRandom() {\n\t\tif (newRendering) {\n\t\t\tSetNewRendering (false);\n\t\t} else {\n\t\t\tSetNewRendering (true);\n\t\t}\n\t}\n\n\tlet table = createTable ();\n\n\treturn (\n\t\t<div className='base'>\n\t\t\t<div className='header'>\n\t\t\t\t<button\n\t\t\t\t\tclassName='circle1'\n\t\t\t\t\tstyle={{backgroundColor: 'red', color: 'red'}}\n\t\t\t\t></button>\n\t\t\t\t<button\n\t\t\t\t\tclassName='circle1'\n\t\t\t\t\tstyle={{backgroundColor: 'green', color: 'green'}}\n\t\t\t\t></button>\n\t\t\t\t<button\n\t\t\t\t\tclassName='circle1'\n\t\t\t\t\tstyle={{backgroundColor: 'yellow', color: 'yellow'}}\n\t\t\t\t></button>\n\t\t\t</div>\n\t\t\t<div className='mosaic'>\n\t\t\t\t{table}\n\t\t\t</div>\n\t\t\t<Footer \n\t\t\t\tforceRandom={forceRandom}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\n/*********************************************************************\n* This class is responsible of building the footer of our mosaic app *\n* The footer includes the button to start/stop the timer             *\n* and the current timer value                                        *\n*********************************************************************/\nfunction Footer ({forceRandom}) {\n\tconst [startCount, SetStartCount] = useState(true);\n\tconst [counter, SetCounter] = useState(60);\n\tconst [isPlaying, SetIsPlaying] = useState(false);\n\tconst countRef = useRef(counter);\n\tcountRef.current = counter;\n\n\t/**********************************************\n\t* Function to refresh the current timer value *\n\t**********************************************/\n\tuseEffect(() => {\n\t\tlet interval;\n\t\tif (startCount) {\n\t\t\tconst el = document.getElementById('counter');\n\t\t\tinterval = setInterval(() => {\n\t\t\t\tSetCounter (currCounter => currCounter - 1);\n\t\t\t\tlet currCounter = countRef.current;\n\t\t\t\tel.innerHTML = currCounter;\n\t\t\t}, 1000);\n\t\t} else {\n\t\t\tclearInterval(interval);\n\t\t}\n\t\treturn () => clearInterval(interval);\n\t}, [startCount]);\n\n\t/*******************************************************************\n\t* Function to reset the timer and prepare for next temporization   *\n\t* Also, it launches a sound when the timer reach the value of zero *\n\t*******************************************************************/\n\tconst ResetCounter = () => {\n\t\tSetCounter(60);\n\t\tSetStartCount(startCount);\n\t\tforceRandom();\n\t}\n\n\t/***************************************************************\n\t* Function fired when the music ends to avoid restarting again *\n\t***************************************************************/\n\tconst handleSongFinishedPlaying = () => {\n\t\tSetIsPlaying(!isPlaying);\n\t}\n\t\t\n\tlet currCounter = countRef.current;\n\tlet backColor;\n\tif (currCounter === 0) {\n\t\tResetCounter();\n\t\tSetIsPlaying(!isPlaying);\n\t} else if (currCounter <= 10) {\n\t\tbackColor = 'red';\n\t} else {\n\t\tbackColor = '#dddddd';\n\t}\n\treturn (\n\t\t<div className='footer'>\n\t\t\t<button\n\t\t\t\tid='randbutton'\n\t\t\t\tclassName='randbutton'\n\t\t\t\tonClick={() => forceRandom()}\n\t\t\t>\n\t\t\t\tRandomize!\n\t\t\t</button>\n\t\t\t<label className='count_label'>\n\t\t\t\tTimer:\n\t\t\t</label>\n\t\t\t<label\n\t\t\t\tid='counter'\n\t\t\t\tclassName='counter'\n\t\t\t\tstyle={{backgroundColor: backColor}}\n\t\t\t>{counter}</label>\n\t\t\t<Sound\n\t\t\t\turl = {soundToPlay}\n\t\t\t\tplayStatus = {isPlaying ? Sound.status.PLAYING : Sound.status.STOPPED}\n\t\t\t\tonFinishedPlaying = {handleSongFinishedPlaying}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\n/********************************************************************\n* This class is responsible for building every cell of the mosaic   *\n* The class receive the shape and the foreground character to print *\n* and calculate random color codes for these elements               *\n********************************************************************/\nclass Shape extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.refButton = React.createRef();\n\t\tthis.clickShape = this.clickShape.bind (this);\n\t\tthis.state = {\n\t\t\tvalue: null,\n\t\t\tinnerHTML: null,\n\t\t};\n\t}\n\n\t/***********************************************************\n\t* Function to update a single shape. Everytime is accessed *\n\t* the character is swapped to an image and when accessed   *\n\t* again, recovers the character associated to the shape    *\n\t* Shape and colors are not updated                         *\n\t***********************************************************/\n/*\tclickShape = () => { */\n\tclickShape () {\n/*\t\tconsole.log (this.refButton);*/\n\t\tif (this.refButton.current.innerText === \"\") {\n\t\t\tthis.refButton.current.innerHTML = this.innerHTML;\n\t\t} else {\n\t\t\t/* Computes the relative size of the facedraw */\n\t\t\tconst shapeSizeInt = 100. / this.props.size;\n\t\t\tconst charSizeInt = 1.1*shapeSizeInt / 2;\n\t\t\tconst imageWidth = charSizeInt.toString() + \"vmin\";\n\t\t\tthis.innerHTML = this.refButton.current.innerHTML;\n\t\t\tthis.refButton.current.innerHTML = \n\t\t\t\t\"<img class='image' src='\" + facedraw + \"' style='width:\" + imageWidth + \"' alt='5'/>\";\n\t\t}\n\t}\n\n\trender() {\n\t\tconst baseColor = \"#dddddd\";\n\t\tconst backColor = randomizeColor (baseColor);\n\t\tconst fontColor = randomizeColor (backColor);\n\t\tconst characterInside = this.props.value;\n\t\tconst keyValue = this.props.id;\n\t\tconst className = this.props.name;\n\t\t/* Computes the relative size of the shapes and characters */\n\t\tconst shapeSizeInt = 100. / this.props.size;\n\t\tconst charSizeInt = 1.128*shapeSizeInt / 2;\n\t\tconst shapeSizeStr = shapeSizeInt.toString() + \"%\";\n\t\tconst charSizeStr = charSizeInt.toString() + \"vmin\";\n\t\t//console.log (charSizeStr);\n\t\treturn (\n\t\t\t<button\n\t\t\t\tkey={keyValue}\n\t\t\t\tref={this.refButton}\n\t\t\t\tid={keyValue}\n\t\t\t\tvalue={characterInside.toString()}\n\t\t\t\tclassName={className}\n\t\t\t\tstyle={{backgroundColor: backColor, color: fontColor, \n\t\t\t\t\t\twidth: shapeSizeStr, height: shapeSizeStr,\n\t\t\t\t\t\tfontSize: charSizeStr}}\n\t\t\t\tonClick={this.clickShape}\n\t\t\t>\n\t\t\t\t{characterInside}\n\t\t\t</button>\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}